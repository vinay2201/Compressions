# huffman coding without using pil
import numpy as np
import os
from heapq import heappush, heappop, heapify
from collections import defaultdict

def huffman_encode(data):
    """Function to encode the data using Huffman coding."""
    frequency = defaultdict(int)
    for symbol in data:
        frequency[symbol] += 1
    
    # Create a priority queue based on frequency
    heap = [[weight, [symbol, ""]] for symbol, weight in frequency.items()]
    heapify(heap)
    
    # Merge nodes to create the tree
    while len(heap) > 1:
        lo = heappop(heap)
        hi = heappop(heap)
        for pair in lo[1:]:
            pair[1] = '0' + pair[1]
        for pair in hi[1:]:
            pair[1] = '1' + pair[1]
        heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
    
    # Dictionary to hold the Huffman codes
    huff = sorted(heappop(heap)[1:], key=lambda p: (len(p[-1]), p))
    huffman_code = {a[0]: a[1] for a in huff}
    
    # Encode the data
    encoded_data = ''.join(huffman_code[symbol] for symbol in data)
    bit_length = len(encoded_data)
    byte_length = bit_length // 8 + (1 if bit_length % 8 > 0 else 0)
    return encoded_data, byte_length

def load_compressed_image_data(filepath):
    """Load the compressed image data from a file into a NumPy array."""
    with open(filepath, 'rb') as file:
        # Read the entire file as bytes
        compressed_data = file.read()
        # Convert the bytes data into a numpy array
        compressed_array = np.frombuffer(compressed_data, dtype=np.uint8)
    return compressed_array

# Example usage:
image_path = 'D:/RobSenCom/features/features/features_0.pth'
compressed_image_array = load_compressed_image_data(image_path)
compressed_array_kb = compressed_image_array.size / 1024
print("Compressed image data loaded into array. Array size:", compressed_array_kb, "KB")
# print("Data type of array:", compressed_image_array.dtype)

# Huffman encoding
compressed_data, compressed_size_bytes = huffman_encode(compressed_image_array)
compressed_size_kb = compressed_size_bytes / 1024
print("Image compressed using Huffman coding.")
print(f"Compressed image size: {compressed_size_kb:.2f} KB")
# print(compressed_data)

original_file_size = os.path.getsize(image_path) / 1024
print(f"Original image file size: {original_file_size:.2f} KB")
